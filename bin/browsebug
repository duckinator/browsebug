#!/usr/bin/env ruby

require 'tessellator'
require 'tessellator/glitch-float'
require 'gtk3'
require 'optparse'

options = {
  url: 'about:welcome',
  debug: false,
  exit_after_navigation: false,
  variance: 4,
  add_variance: nil,
  sub_variance: nil,
  addsub_variance: nil,
}

OptionParser.new do |opts|
  opts.banner = "Usage: tessellator [options]"

  opts.on("--variance=[VARIANCE]", "Variance of glitching (default: #{options[:variance]}).") do |v|
    options[:variance] = v.to_i unless v == 'other'
    options[:variance] ||= v
  end

  opts.on("--addsub-variance=[ADDSUB_VARIANCE]", "Variance of glitching for addition or subtraction (default: same as VARIANCE).") do |v|
    if v == 'other'
      options[:add_variance] = options[:sub_variance] = v
    else
      options[:add_variance] = options[:sub_variance] = v.to_i
    end
  end

  opts.on("--add-variance=[ADD_VARIANCE]", "Variance of glitching for addition (default: same as ADDSUB_VARIANCE).") do |v|
    options[:add_variance] = v.to_i unless v == 'other'
    options[:add_variance] ||= v
  end

  opts.on("--sub-variance=[SUB_VARIANCE]", "Variance of glitching for subtraction (default: same as ADDSUB_VARIANCE).") do |v|
    options[:sub_variance] = v.to_i unless v == 'other'
    options[:sub_variance] ||= v
  end

  opts.on("-d", "--[no-]debug", "Run in debug mode") do |v|
    options[:debug] = v
  end

  opts.on("--exit-after-navigation", "Exit after navigation is complete.") do |v|
    options[:exit_after_navigation] = v
  end

  opts.on("--exit-after=[seconds]", "Exit after the specified number of seconds.") do |v|
    Thread.new do
      sleep v.to_i
      Gtk.main_quit
    end
  end

  opts.on("--profile=[mode]", "Enable profiling using StackProf (mode=wall, cpu, object; default: cpu).") do |v|
    options[:profile_mode] = v.downcase.to_sym
  end
end.parse!

options[:url] = ARGV.delete_at(0) if ARGV.length == 1

Float.randomize_methods(options)

Tessellator.debug = options[:debug]

class Gtk::Widget
  def observe(other, &block)
    define_singleton_method(:update, &block)

    other.add_observer(self)
  end
end

class Tessellator::GtkClient
  def initialize(options)
    Gtk.init

    win  = Gtk::Window.new :toplevel
    vbox = Gtk::Box.new(:vertical, 2)
    hbox = Gtk::Box.new(:horizontal, 2)

    wv = Tessellator::WebView.new

    textbox = Gtk::Entry.new
    textbox.placeholder_text = 'http://example.com'
    textbox.activates_default = true
    textbox.observe(wv) do |wv|
      self.text = wv.location

      exit if options[:exit_after_navigation]
    end

    back_btn    = button('Back') { wv.go_back }
    back_btn.observe(wv) {|wv| self.sensitive = wv.can_go_back }

    forward_btn = button('Forward') { wv.go_forward }
    forward_btn.observe(wv) {|wv| self.sensitive = wv.can_go_forward }

    reload_btn  = button('Reload') { wv.reload }
    load_btn    = button('Go') { wv.open(textbox.text) }

    image = Gtk::Image.new
    image.observe(wv) {|wv| self.surface = wv.surface }

    hbox.add(back_btn)
    hbox.add(forward_btn)
    hbox.add(textbox)
    hbox.add(reload_btn)
    hbox.add(load_btn)

    vbox.add(hbox)

    vbox.add(image)

    win.add(vbox)
    win.show_all

    win.observe(wv) do |wv|
      self.title = wv.title
      textbox.text = wv.location
    end

    wv.open(options[:url])

    trap(:INT) { Gtk.main_quit }
    win.signal_connect('destroy') { Gtk.main_quit }
  end

  def button(label, &block)
    ret = Gtk::Button.new

    ret.label = label if label

    ret.signal_connect('clicked', &block) if block

    ret
  end
end

def run!(options)
  Tessellator::GtkClient.new(options)

  Gtk.main
end


if options[:profile_mode]
  require 'stackprof'

  filename = "stackprof-#{options[:profile_mode].to_s}-tessellator.dump"
  StackProf.run(mode: options[:profile_mode], out: filename) { run!(options) }
else
  run!(options)
end

