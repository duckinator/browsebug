#!/usr/bin/env ruby

require 'tessellator'
require 'gtk3'
#require 'gir_ffi-gtk3'
require 'optparse'

options = {
  url: 'https://www.google.com',
  debug: false,
}

OptionParser.new do |opts|
  opts.banner = "Usage: tessellator [options]"

  opts.on("-d", "--[no-]debug", "Run in debug mode") do |v|
    options[:debug] = v
  end
end.parse!

options[:url] = ARGV.delete_at(0) if ARGV.length == 1

Tessellator.debug = options[:debug]

class Gtk::Widget
  def observe(other, &block)
    define_singleton_method(:update, &block)

    other.add_observer(self)
  end
end

class Tessellator::GtkClient
  def initialize(url)
    Gtk.init

    win  = Gtk::Window.new :toplevel
    vbox = Gtk::VBox.new(false, 2)
    hbox = Gtk::HBox.new(false, 2)

    @wv = wv = Tessellator::WebView.new

    textbox = Gtk::Entry.new
    textbox.placeholder_text = 'http://example.com'
    textbox.activates_default = true
    textbox.observe(wv) {|wv| self.text = wv.location }

    back_btn    = button('〈') { wv.go_back }
    #back_btn.observe(wv) {|wv| self.enabled = wv.can_go_back }

    forward_btn = button('〉') { wv.go_forward }
    #back_btn.observe(wv) {|wv| self.enabled = wv.can_go_back }

    reload_btn  = button('↻') { wv.reload }
    load_btn    = button('→') { wv.open(textbox.text) }

    image = Gtk::Image.new
    image.observe(wv) {|wv| self.surface = wv.surface }

    hbox.add(back_btn)
    hbox.add(forward_btn)
    hbox.add(textbox)
    hbox.add(reload_btn)
    hbox.add(load_btn)

    vbox.add(hbox)

    vbox.add(image)

    win.add(vbox)
    win.show_all

    win.observe(wv) do |wv|
      self.title = wv.title
      textbox.text = wv.location
    end

    wv.open(url)

    trap(:INT) { Gtk.main_quit }
    win.signal_connect('destroy') { Gtk.main_quit }
  end

  def button(label, &block)
    ret = Gtk::Button.new

    ret.label = label if label

    ret.signal_connect('clicked', &block) if block

    ret
  end
end

Tessellator::GtkClient.new(options[:url])

Gtk.main
